{"version":3,"file":"static/js/378.e4a7afa8.chunk.js","mappings":"mLAeA,MAVA,WACE,IAAOA,GAAQC,EAAAA,EAAAA,KAAY,SAACC,GAAe,OAAKA,EAAMC,YAAY,IAA3DH,KACP,OACEI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,oBAAoBC,IAAI,SAASJ,UAAU,YACpDE,EAAAA,EAAAA,KAAA,KAAGF,UAAU,WAAUC,SAAEN,MAGjC,E,UCSA,MAnBA,WAEE,OACEO,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,UACxBI,EAAAA,EAAAA,GAAIC,MAAM,IAAIC,KAAI,SAAAC,GAAE,OAAKT,EAAAA,EAAAA,MAAA,MAAIC,UAAU,kBAAiBC,SAAA,EACrDC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,6BAA6BC,IAAI,aAC1CL,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,mCACHC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAEF,OAKf,E,mBCSA,MAxBA,WACE,IAAAQ,GAAoCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAC1BI,GAAWC,EAAAA,EAAAA,MAEXC,GAAkBC,EAAAA,EAAAA,cAAY,WAC/BL,GAAcA,EAAWM,QAAU,IACpCJ,GAASK,EAAAA,EAAAA,IAAQP,IACjBQ,aAAaC,QAAQ,OAAQT,GAEjC,GAAE,CAACA,IAEH,OACEd,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,SACEqB,YAAY,kBACZC,UAAW,GACXC,MAAOZ,EACPa,SAAU,SAACC,GAAC,OAAIb,EAAca,EAAEC,OAAOH,MAAM,KAE/CvB,EAAAA,EAAAA,KAAA,UAAQ2B,KAAK,SAASC,QAAS,kBAAIb,GAAiB,EAAChB,SAAC,oBAG5D,ECTA,MAXA,WACE,IAAMc,GAAWC,EAAAA,EAAAA,MACVe,GAAUnC,EAAAA,EAAAA,KAAY,SAACC,GAAe,OAAKA,EAAMC,YAAY,IAA7DiC,OACP,OACEhC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,cAAaC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAI4B,QAAS,kBAAIf,GAASiB,EAAAA,EAAAA,IAAU,WAAW,EAAEhC,UAAS,mBAAAiC,OAA8B,YAATF,EAAqB,SAAW,IAAK9B,SAAC,sBACrHC,EAAAA,EAAAA,KAAA,MAAI4B,QAAS,kBAAIf,GAASiB,EAAAA,EAAAA,IAAU,cAAc,EAAEhC,UAAS,mBAAAiC,OAA8B,eAATF,EAAwB,SAAW,IAAK9B,SAAC,0BAGjI,ECOA,EAd0BiC,EAAAA,MAAW,WACnC,IAAOH,GAAUnC,EAAAA,EAAAA,KAAY,SAACC,GAAe,OAAKA,EAAMC,YAAY,IAA7DiC,OACP,OACEhC,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACAC,EAAAA,EAAAA,KAACiC,EAAW,KACZpC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAACkC,EAAc,IACH,YAAXL,IAAwB7B,EAAAA,EAAAA,KAACmC,EAAc,IAC5B,eAAXN,IAA2B7B,EAAAA,EAAAA,KAACoC,EAAiB,SAIpD,G","sources":["components/Profile/ProfileHead/index.tsx","components/Profile/ProfileHistory/index.tsx","components/Profile/ProfileNameChange/index.tsx","components/Profile/ProfileSideBar/index.tsx","Pages/ProfilePage/ProfilePage.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../../Redux/store'\r\nimport './ProfileHead.css'\r\n\r\nfunction ProfileHead() {\r\n  const {name} = useSelector((state:RootState) => state.ProfileSlice)\r\n  return (\r\n    <div className='headContainer'>\r\n        <img src='images/avatar.jpg' alt='avatar' className='avatar'/>\r\n        <p className='userName'>{name}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileHead","import React from 'react'\r\nimport './ProfileHistory.css'\r\n\r\nfunction ProfileHistory() {\r\n  \r\n  return (\r\n    <div className='historyContainer'>\r\n      <ul className='historyList'>\r\n        {[...Array(3)].map(el => (<li className='historyListItem'>\r\n            <img src='images/history_product.jpg' alt='product'></img>\r\n            <div>\r\n              <p>date: xx.xx.xxxx </p>\r\n              <p>Name of the purchased product</p>\r\n              <p>price</p>\r\n            </div>\r\n          </li>))\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileHistory","import React, { useCallback, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setName } from '../../../Redux/Slices/ProfileSlice'\r\nimport './ProfileNameChange.css'\r\n\r\nfunction ProfileNameChange() {\r\n  const [inputValue, setInputValue] = useState('')\r\n  const dispatch = useDispatch()\r\n\r\n  const onClickApplyBtn = useCallback(() => {\r\n    if(inputValue && inputValue.length >= 5) {\r\n      dispatch(setName(inputValue))\r\n      localStorage.setItem('name', inputValue)\r\n    }\r\n  },[inputValue])\r\n\r\n  return (\r\n    <div className='nameChangeContainer'>\r\n      <input\r\n        placeholder='write a name...'\r\n        maxLength={30}\r\n        value={inputValue}\r\n        onChange={(e)=> setInputValue(e.target.value)}\r\n      />\r\n      <button type='button' onClick={()=>onClickApplyBtn()}>Apply changes</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileNameChange","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setStatus } from '../../../Redux/Slices/ProfileSlice'\r\nimport { RootState } from '../../../Redux/store'\r\nimport './ProfileSideBar.css'\r\n\r\nfunction ProfileSideBar() {\r\n  const dispatch = useDispatch()\r\n  const {status} = useSelector((state:RootState) => state.ProfileSlice)\r\n  return (\r\n    <ul className='sideBarList'>\r\n      <li onClick={()=>dispatch(setStatus('history'))} className={`sideBarListItem ${status==='history' ? 'active' : ''}`}>Purchase history</li>\r\n      <li onClick={()=>dispatch(setStatus('changeName'))} className={`sideBarListItem ${status==='changeName' ? 'active' : ''}`}>Change account name</li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ProfileSideBar","import React, { useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport ProfileHead from '../../components/Profile/ProfileHead'\r\nimport ProfileHistory from '../../components/Profile/ProfileHistory'\r\nimport ProfileNameChange from '../../components/Profile/ProfileNameChange'\r\nimport ProfileSideBar from '../../components/Profile/ProfileSideBar'\r\nimport { RootState } from '../../Redux/store'\r\nimport './ProfilePage.css'\r\n\r\nconst Profile: React.FC = React.memo(() => {\r\n  const {status} = useSelector((state:RootState) => state.ProfileSlice)\r\n  return (\r\n    <div>\r\n    <ProfileHead />\r\n    <div className='profileContainer'>\r\n      <ProfileSideBar />\r\n      {status === 'history' && <ProfileHistory/>}\r\n      {status === 'changeName' && <ProfileNameChange/>}\r\n    </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Profile"],"names":["name","useSelector","state","ProfileSlice","_jsxs","className","children","_jsx","src","alt","_toConsumableArray","Array","map","el","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","dispatch","useDispatch","onClickApplyBtn","useCallback","length","setName","localStorage","setItem","placeholder","maxLength","value","onChange","e","target","type","onClick","status","setStatus","concat","React","ProfileHead","ProfileSideBar","ProfileHistory","ProfileNameChange"],"sourceRoot":""}